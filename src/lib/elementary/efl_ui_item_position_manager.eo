
interface @beta Efl.Ui.Item_Position_Manager extends Efl.Gfx.Arrangement, Efl.Ui.Layout_Orientable
{
   [[
     This abstracts the basic placement of items in a not defined form under a viewport.

     The interface gets a defined set of elements that is meant to be displayed. The implementation provides a way to calculate the size that is required to display all items. Every time this absolut size of items is changed, content_size,changed is called.
   ]]
   methods {
      @property data_access {
         [[Called when a instance of this class is set to a item_container (or the async variation)]]
         set {

         }
         values {
           obj_access : accessor<Efl.Gfx.Entity>; [[The accessor for data, even if the id is valid, the returned object may be NULL]]
           size_access : accessor<Eina.Size2D>; [[Accessor for the size, returned value always valid, might be changed / updated]]
           size : int; [[valid size for accessor, 0 <= i < size]]
         }
      }
      @property viewport {
         [[This is the position and size of the viewport, where elements are displayed in. The outside of this geometry is going to be clibbed off.]]
         set {

         }
         values {
           viewport : Eina.Rect;
         }
      }
      @property scroll_positon {
         [[The position we are currently in in the absolut size of items]]
         set {

         }
         values {
           x : double; [[X position of the scroller, valid form 0 to 1.0]]
           y : double; [[Y position of the scroller, valid form 0 to 1.0]]
         }
      }
      position_single_item {
         [[This is a request to position the item at id $idx. This means, the geometry of the item has to have to correct values, even outside the viewport. This is usefull for scrolling to / focusing elements on a screen.]]
         params {
            idx : int; [[The id for the item]]
         }
      }
      item_added {
        [[The new item $subobj has been added at the $added_index field.]]
        params {
          added_index : int;
          subobj : Efl.Gfx.Entity;
        }
      }
      item_removed {
        [[The new item $subobj has been removed at the $removed_index field.]]
        params {
          removed_index : int;
          subobj : Efl.Gfx.Entity;
        }
      }
      item_size_changed {
        [[The size of the given $subobj / $index returned from the accessor will be different this time]]
        params {
          index : int;
          subobj : Efl.Gfx.Entity;
        }
      }
   }
   events {
     content_size,changed : Eina.Size2D; [[called when the absolut size of all contents has changed, this can be used to resize the pan object]]
   }
}
